{
  "category": "Wallet Methods",
  "methods" :
    [
      {
        "method_name": "wallet_open_file",
        "description": "Opens the wallet at the given path",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_file", 
              "type" : "filename", 
              "description" : "the full path and filename of the wallet to open",
              "example" : "/path/to/wallet.dat"
            }
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_open",
        "description": "Opens the wallet of the given name",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "the name of the wallet to open"
            }
          ],
        "prerequisites" : ["json_authenticated"],
        "aliases" : ["open"]
      },
      {
        "method_name": "wallet_create",
        "description": "Creates a wallet with the given name",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "name of the wallet to create"
            },
            { 
              "name" : "new_passphrase", 
              "type" : "new_passphrase", 
              "description" : "a passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_get_name",
        "description": "Returns the wallet name passed to wallet_open",
        "return_type": "optional_wallet_name",
        "parameters" : [],
        "is_const" : true,
        "prerequisites" : ["no_prerequisites"]
      },
      {
        "method_name": "wallet_import_private_key",
        "description": "Loads the private key into the specified account",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wif_key",
              "type" : "wif_private_key",
              "description" : "A private key in bitcoin Wallet Import Format (WIF)"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account the key should be imported into, if null then the key must belong to an active account",
              "default_value" : null
           },
           {
              "name" : "rescan",
              "type" : "bool",
              "description" : "If true, the wallet will rescan the blockchain looking for transactions that involve this private key",
              "default_value" : true
           }
        ],
        "prerequisites" : ["json_authenticated","wallet_open","wallet_unlocked"],
        "aliases" : ["import_key"]
      },
      {
        "method_name": "wallet_import_bitcoin",
        "description": "Imports a bitcoin wallet",
        "return_type": "void",
        "parameters" : [
           {
              "name" : "wallet_filename",
              "type" : "filename"
              "description" : "the bitcoin wallet"
           },
           {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the wallet's password"
           },
           {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account name to receive the contents of the wallet"
           }
        ],
        "prerequisites" : ["json_authenticated","wallet_open","wallet_unlocked"]
      },
      {
        "method_name": "wallet_close",
        "description": "Closes the curent wallet if one is open",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["no_prerequisites"],
        "aliases" : ["close"]
      },
      {
        "method_name": "wallet_export_to_json",
        "description": "Exports the current wallet to a JSON file",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "json_filename", 
              "type" : "filename", 
              "description" : "the full path and filename of JSON file to generate",
              "example" : "/path/to/exported_wallet.json"
            }
          ],
        "is_const" : true,
        "prerequisites" : ["json_authenticated", "wallet_open"]
      },
      {
        "method_name": "wallet_create_from_json",
        "description": "Creates a new wallet from an exported JSON file",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "json_filename", 
              "type" : "filename", 
              "description" : "the full path and filename of JSON wallet to import",
              "example" : "/path/to/exported_wallet.json"
            },
            { 
              "name" : "wallet_name", 
              "type" : "wallet_name", 
              "description" : "name of the wallet to create"
            }
          ],
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_account_transaction_history",
        "description": "Lists all transactions for the specified account",
        "return_type": "pretty_transactions",
        "parameters" : 
          [
            { 
              "name" : "account_name", 
              "type" : "account_name", 
              "description" : "the name of the account for which the transaction history will be returned",
              "example" : "alice",
              "default_value" : ""
            }          ],
        "prerequisites" : ["json_authenticated","wallet_open"],
        "aliases" : ["history"]
      },
      {
        "method_name": "wallet_clear_pending_transactions",
        "description": "Clear \"stuck\" pending transactions from the wallet.",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["json_authenticated","wallet_open"],
        "aliases" : []
      },
      {
        "method_name": "wallet_lock",
        "description": "Lock the private keys in wallet, disables spending commands until unlocked",
        "return_type": "void",
        "parameters" : [],
        "prerequisites" : ["json_authenticated", "wallet_open"],
        "aliases" : ["bitcoin_walletlock", "walletlock", "lock"]
      },
      {
        "method_name": "wallet_unlock",
        "description": "Unlock the private keys in the wallet to enable spending operations",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "timeout", 
              "type" : "time_interval_in_seconds", 
              "description" : "the number of seconds to keep the wallet unlocked"
            },
            { 
              "name" : "passphrase", 
              "type" : "passphrase", 
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open"],
        "aliases" : ["unlock"]
      },
      {
        "method_name": "wallet_change_passphrase",
        "description": "Change the password of the current wallet",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "passphrase", 
              "type" : "passphrase", 
              "description" : "the passphrase for encrypting the wallet"
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
        "detailed_description" : "This will change the wallet's spending passphrase, please make sure you remember it."
      },
      {
        "method_name": "wallet_list",
        "description": "Return a list of wallets in the current data directory",
        "return_type": "wallet_name_array",
        "parameters" : [],
        "prerequisites" : ["json_authenticated"],
        "is_const": true,
        "aliases" : []
      },
      {
        "method_name": "wallet_account_create",
        "description": "Add new account for receiving payments",
        "return_type": "public_key",
        "parameters" : 
          [
            { 
              "name" : "account_name", 
              "type" : "account_name", 
              "description" : "the name you will use to refer to this receive account",
              "enable_autocomplete" : false
            },
            { 
              "name" : "private_data", 
              "type" : "json_variant", 
              "description" : "Extra data to store with this account record",
              "default_value" : null
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
        "aliases" : [ "wallet_create_account", "create_account" ]
      },
      {
        "method_name": "wallet_set_delegate_trust_level",
        "description": "Updates the trust placed in a given delegate",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "delegate_name", 
              "type" : "account_name", 
              "description" : "the name of the delegate to set trust level on"
            },
            { 
              "name" : "trust_level", 
              "type" : "int32_t", 
              "description" : "Positive for Trust, Negative for Distrust, 0 for Neutral",
              "default_value" : 0
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open"],
        "aliases" : [ "trust", "set_trust" ]
      },
      {
        "method_name": "wallet_add_contact_account",
        "description": "Add new account for sending payments",
        "return_type": "void",
        "parameters" : 
          [
            { 
              "name" : "account_name", 
              "type" : "account_name", 
              "description" : "the name you will use to refer to this sending account",
              "enable_autocomplete" : false
            },
            { 
              "name" : "account_key", 
              "type" : "public_key", 
              "description" : "the key associated with this sending account"
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open"]
      },
      {
        "method_name": "wallet_get_pretty_transaction",
        "description": "Return a pretty JSON representation of a transaction",
        "return_type": "pretty_transaction",
        "parameters" : 
          [
            { 
              "name" : "transaction", 
              "type" : "signed_transaction", 
              "description" : "the transaction to pretty-print"
            }
          ],
        "is_const" : true,
        "prerequisites" : ["json_authenticated"]
      },
      {
        "method_name": "wallet_get_balance",
        "description": "",
        "return_type": "asset_array",
        "parameters" : 
          [
            { 
              "name" : "symbol", 
              "type" : "asset_symbol", 
              "description" : "The type of account, ie: XTS, GLD, USD or * for everything",
              "default_value" : "*"
            },
            { 
              "name" : "account_name", 
              "type" : "receive_account_name", 
              "description" : "The account to list the balance of.",
              "default_value" : "*"
            }
          ],
        "is_const" : true,
        "prerequisites" : ["json_authenticated"],
        "aliases" : [  ]
      },
      {
        "method_name": "wallet_multipart_transfer",
        "description": "Sends given amount to the given address, assumes shares in DAC.  This transfer will occur using multiple transactions as necessary to maximize your privacy, but will be more costly.",
        "return_type": "signed_transaction_array",
        "parameters" : 
          [
            {
              "name" : "amount_to_transfer", 
              "type" : "amount", 
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol", 
              "type" : "asset_symbol", 
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name", 
              "type" : "sending_account_name", 
              "description" : "the source account(s) to draw the shares from"
            },
            {
              "name" : "to_account_name", 
              "type" : "receive_account_name", 
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message", 
              "type" : "std::string", 
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
        "aliases" : ["multipart_transfer"]
      },
      {
        "method_name": "wallet_transfer",
        "description": "Sends given amount to the given address, assumes shares in DAC.  This transfer will occur in a single transaction and will be cheaper, but may reduce your privacy.",
        "return_type": "signed_transaction",
        "parameters" : 
          [
            {
              "name" : "amount_to_transfer", 
              "type" : "amount", 
              "description" : "the amount of shares to transfer"
            },
            {
              "name" : "asset_symbol", 
              "type" : "asset_symbol", 
              "description" : "the asset to transfer"
            },
            {
              "name" : "from_account_name", 
              "type" : "sending_account_name", 
              "description" : "the source account(s) to draw the shares from"
            },
            {
              "name" : "to_account_name", 
              "type" : "receive_account_name", 
              "description" : "the account to transfer the shares to"
            },
            {
              "name" : "memo_message", 
              "type" : "std::string", 
              "description" : "a memo to store with the transaction",
              "default_value" : ""
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
        "aliases" : ["transfer"]
      },
      {
        "method_name": "wallet_rescan_blockchain",
        "description": "Scans the transaction history for operations relevant to this wallet.",
        "return_type": "void",
        "parameters" : 
          [
            {
              "name" : "first_block_number", 
              "type" : "uint32_t", 
              "description" : "the first block to scan"
            },
            {
              "name" : "num_blocks", 
              "type" : "uint32_t", 
              "description" : "the number of blocks to scan"
            }
          ],
        "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
        "aliases" : ["scan"]
      },
      {
         "method_name" : "wallet_account_register",
         "description" : "Updates the data published about a given account",
         "return_type" : "transaction_record",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "as_delegate",
                  "type" : "bool",
                  "description" : "true if account_name should be upgraded to a delegate.",
                  "default_value" : false
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
         "aliases" : [ "register" ]
      },
      {
         "method_name" : "wallet_account_update_registration",
         "description" : "Updates the data published about a given account",
         "return_type" : "transaction_record",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the account that will be updated"
               },
               {
                  "name" : "pay_from_account",
                  "type" : "account_name",
                  "description" : "the account from which fees will be paid"
               },
               {
                  "name" : "public_data",
                  "type" : "json_variant",
                  "description" : "public data about the account",
                  "default_value" : null
               },
               {
                  "name" : "as_delegate",
                  "type" : "bool",
                  "description" : "true if account_name should be upgraded to a delegate.",
                  "default_value" : false
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
         "aliases" : [ "update_registration" ]
      },
      {
         "method_name" : "wallet_list_contact_accounts",
         "description" : "Lists all foreign addresses and their labels associated with this wallet",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["json_authenticated", "wallet_open" ]
      },
      {
         "method_name" : "wallet_list_receive_accounts",
         "description" : "TODO: wrong description? Lists all foreign addresses and their labels associated with this wallet",
         "return_type" : "wallet_account_record_array",
         "parameters"  : [],
         "is_const" : true,
         "prerequisites" : ["json_authenticated", "wallet_open" ]
      },
      {
         "method_name" : "wallet_get_account",
         "description" : "TODO: wrong description? Lists all foreign addresses and their labels associated with this wallet",
         "return_type" : "wallet_account_record",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to retrieve"
               }
            ],
         "is_const" : true,
         "prerequisites" : ["json_authenticated", "wallet_open" ]
      },
      {
         "method_name" : "wallet_remove_contact_account",
         "description" : "Remove a contact account from your wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "account_name",
                  "type" : "account_name",
                  "description" : "the name of the contact"
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open" ]
      },
      {
         "method_name" : "wallet_rename_account",
         "description" : "Rename an account in wallet",
         "return_type" : "void",
         "parameters"  : [
               {
                  "name" : "current_account_name",
                  "type" : "account_name",
                  "description" : "the current name of the account"
               },
               {
                  "name" : "new_account_name",
                  "type" : "new_account_name",
                  "description" : "the new name for the account"
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open" ]
      },
      {
         "method_name" : "wallet_asset_create",
         "description" : "Creates a new user issued asset",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for the new asset"
               },
               {
                  "name" : "asset_name",
                  "type" : "std::string",
                  "description" : "the name of the asset"
               },
               {
                  "name" : "issuer_name",
                  "type" : "std::string",
                  "description" : "the name of the issuer of the asset"
               },
               {
                  "name" : "description",
                  "type" : "std::string",
                  "description" : "a description of the asset",
                  "default_value" : ""
               },
               {
                  "name" : "data",
                  "type" : "json_variant",
                  "description" : "arbitrary data attached to the asset",
                  "default_value" : null
               },
               {
                  "name" : "maximum_share_supply",
                  "type" : "int64_t",
                  "description" : "the maximum number of shares of the asset",
                  "default_value" : 1000000000000000
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ]
      },
      {
         "method_name" : "wallet_asset_issue",
         "description" : "Issues new shares of a given asset type",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "amount",
                  "type" : "share_type",
                  "description" : "the amount of shares to issue"
               },
               {
                  "name" : "symbol",
                  "type" : "asset_symbol",
                  "description" : "the ticker symbol for asset"
               },
               {
                  "name" : "to_account_name",
                  "type" : "account_name",
                  "description" : "the name of the account to receive the shares"
               },
               {
                  "name" : "memo_message",
                  "type" : "std::string",
                  "description" : "the memo to send to the receiver"
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ]
      },
      {
         "method_name" : "wallet_submit_proposal",
         "description" : "Submit a proposal to the delegates for voting",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "delegate_account_name",
                  "type" : "account_name",
                  "description" : "the delegate account proposing the issue"
               },
               {
                  "name" : "subject",
                  "type" : "std::string",
                  "description" : "the subject of the proposal"
               },
               {
                  "name" : "body",
                  "type" : "std::string",
                  "description" : "the body of the proposal"
               },
               {
                  "name" : "proposal_type",
                  "type" : "std::string",
                  "description" : "the type of the proposal"
               },
               {
                  "name" : "data",
                  "type" : "json_variant",
                  "description" : "the name of the account to receive the shares"
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ]
      },
      {
         "method_name" : "wallet_vote_proposal",
         "description" : "Vote on a proposal",
         "return_type" : "signed_transaction",
         "parameters"  : [
               {
                  "name" : "name",
                  "type" : "account_name",
                  "description" : "the name of the account to vote with"
               },
               {
                  "name" : "proposal_id",
                  "type" : "proposal_id",
                  "description" : "the id of the proposal to vote on"
               },
               {
                  "name" : "vote",
                  "type" : "uint8_t",
                  "description" : "your vote"
               }
            ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked", "connected_to_network" ]
      },
      {
         "method_name" : "wallet_list_unspent_balances",
         "description" : "Lists the unspent balances that are controlled by this wallet",
         "return_type" : "wallet_balance_record_array",
         "parameters"  : [
           {
                "name" : "account_name",
                "type" : "account_name",
                "description" : "the account for which unspent balances should be listed",
                "default_value" : "*"
           },
           {
               "name" : "symbol",
               "type" : "asset_symbol",
               "description" : "The symbol to filter by, '*' for all",
                "default_value" : "*"
           }
         ],
         "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ]
      },
      {
         "method_name"    : "wallet_account_balance",
         "description"    : "Lists the total balances of all accounts sorted by account and asset",
         "return_type"    : "map< account_name, map< asset_symbol, share_type> >",
         "parameters"     : [],
         "prerequisites"  : ["json_authenticated","wallet_open"],
         "aliases" : ["balance"]
      },
      {
         "method_name"  : "wallet_withdraw_delegate_pay",
         "description"  : "Used to transfer some of the delegates pay from their balance",
         "return_type"  : "signed_transaction",
         "parameters"   : [
            {
              "name" : "delegate_name",
              "type" : "account_name",
              "description" : "the delegate who's pay is being cashed out"
            },
            {
              "name" : "to_account_name",
              "type" : "account_name",
              "description" : "the account that should receive the funds"
            },
            {
               "name" : "amount_to_withdraw",
               "type" : "share_type",
               "description" : "the amount to withdraw"
            },
            {
               "name" : "memo",
               "type" : "std::string",
               "description" : "memo to add to transaction"
            }
         ],
         "prerequisites"  : ["json_authenticated","wallet_open","wallet_unlocked"],
         "aliases" : ["pay_delegate"]
      }

    ]
}
